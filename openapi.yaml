openapi: 3.0.3
info: 
  title: DaB Integration with ContentFlow (CMS)
  description: |
   ## About API
    Using this `API specification`, Assets Management System can understand the _API_   that is exposed by the ***FoC***   team to UPLOAD, UPDATE, GET and DELETE Assets in ContentFlow.

  contact: 
    name: Hem Kant
    email: hem.kant@adidas.com
  version: 0.0.1
servers: 
  - url: https://dev.api.com/v1/
    description: Devlopment API
  - url: https://qa.api.com/v1/
    description: QA API
  - url: https://api.com/v1/
    description: PROD API
paths:
  /asset:
    post:
      summary: Upload assets to ContentFlow (CMS).
      description: |
        Post assets form DaB and upload to ContentFlow (CMS)
      operationId: uploadAssets
      security:
        - APIKeyAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                assets: 
                  type: array
                  items:
                    $ref: "#/components/schemas/assets" 
              
      responses:
        '204':
          description: Assets deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  assetID:
                    type: integer
                  assetName:
                    type: string
        '500':
          $ref: "#/components/responses/Standard500ErrorResponse"
        '401':
          description: Unauthorized  
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                    
  /getAsset/{assetID}:
    get:
      summary: Get asset from ContentFlow (CMS).
      description: |
        Get assets from ContentFlow (CMS)
      operationId: getAsset
      security:
        - APIKeyAuth: []    
      parameters:
        - name: assetId
          in: path
          required: true
          schema:
            type: integer
            maximum: 1000
          example: 100
      responses:
        '200':
          description: OK
          content:
            image/png:
              schema:
                type: string
                format: binary
        '500':
          $ref: "#/components/responses/Standard500ErrorResponse"
          
  /asset/{assetID}:
    delete:
      summary: Delete an asset from ContentFlow (CMS)
      description: |
         Delete an assets when asset is removed from S3 bucket
      opreationID: deleteAssets        
      security:
        - APIKeyAuth: []
      parameters:
        - name: assetId
          in: path
          required: true
          schema:
            type: integer
          example: 100
      responses:
        '201':
          description: Assets deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  assetID:
                    type: integer
                  assetName:
                    type: string
        '500':
          $ref: "#/components/responses/Standard500ErrorResponse"
        '401':
          description: Unauthorized  
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
components:
  schemas:
    assets:
      type: object
      properties:
        assetID:
          type: integer
        assetName:
          type: string
          description: >-
                    name of files to be added. Name cannot contain any of the
                    characters mentioned in braces (\, /, :, *, ?, â€œ, <, >, |)
        assetPath:
          description: files for upload. type is file.
          type: string
          format: binary 
      required:
        - assetID
        - assetName
        - assetPath
    Error:
      required:
        - timestamp
        - error
        - message
        - detail
      properties:
        timestamp:
          description: The server time stamp
          type: string
          example: 1518308894652
        error:
          description: The API error code
          type: string
          example: 336
        message:
          description: The error message
          type: string
          example: error mesage
        detail:
          description: The source of the error
          type: string
          example: source
  responses:
    Standard500ErrorResponse:
      description: There was an unexpected error processing the request
      headers:
        Content-Type:
          schema:
            type: string
            default: application/problem+json
      content:
        application/json:
          examples:
            response:
              value:
                timestamp: '2023-02-16 10:49:29'
                error: INTERNAL_SERVER_ERROR
                title: There was an error processing the request
                detail: '{''pointer'' : ''not available''}'
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Error'
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
        application/octet-stream:
          schema:
            $ref: '#/components/schemas/Error'
        
    Standard404ErrorResponse:
      description: Resource not found
      headers:
        Content-Type:
          schema:
            type: string
            default: application/json
      content:
        application/json:
          examples:
            response:
              value:
                timestamp: '2023-02-16 10:49:29'
                error: RESOURCE_NOT_FOUND
                message: The resource you are requesting does not exists.
                detail: '{''pointer'' : ''not available''}'
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Error'
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
        application/octet-stream:
          schema:
            $ref: '#/components/schemas/Error'
    Standard414ErrorResponse:
      description: The request URI was too long
      headers:
        Content-Type:
          schema:
            type: string
            default: application/json
      content:
        application/json:
          examples:
            response:
              value:
                timestamp: '2023-02-16 10:49:29'
                error: REQUEST_URI_TOO_LONG
                message: The requested URI was too long
                detail: '{''pointer'' : ''not available''}'
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Error'
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
        application/octet-stream:
          schema:
            $ref: '#/components/schemas/Error'

    Standard422ErrorResponse:
      description: Mandatory details not present
      headers:
        Content-Type:
          schema:
            type: string
            default: application/problem+json
      content:
        application/json:
          examples:
            response:
              value:
                timestamp: '2023-02-16 10:49:29'
                error: MANDATORY_PARAMETERS_NOT_FOUND
                message: The query paramater filter should have assets-id as mandatory.
                detail: >-
                  MANDATORY_PARAMETERS_NOT_FOUND!!
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Error'
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
        application/octet-stream:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    APIKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
    oAuth2AuthCode:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://server/oauth/authorize
          tokenUrl: https://server/api/authorize/token
          scopes:
            read: read accesss
            write: write accesss
            admin: admin accesss
