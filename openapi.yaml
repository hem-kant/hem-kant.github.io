openapi: 3.0.3
info: 
  title: DAB Integration with ContentFlow (CMS)
  description: |
   ## About API
    Using this `OpenAPI specification`, any Assets Management System can understand the _APIs_ that are exposed by the ***FoC***  team to push Assets to ContentFlow.
  x-custom-info:
    comment: some comments
    authors:
      - name: Hem Kant
        email: hem.kant@adidas.com
  contact: 
    name: FoC Support
    email: hem.kant@adidas.com
  version: 0.0.1
servers: 
  - url: https://dev.api.com/v1/
    description: Devlopment API
  - url: https://qa.api.com/v1/
    description: QA API
  - url: https://api.com/v1/
    description: PROD API
  - url: https://{username}.api.com:{port}/{version}
    variables:
      username:
        default: demo
        description: this value is a default.
      port:
        enum:
          - "8080"
          - "443"
        default: "8080"
      version: 
        default: v1
paths:
  /assets:
    post:
      summary: Uplaod assets to ContentFlow (CMS).
      description: |
        Post assets for processing
      operationId: uploadAssets
      security:
        - APIKeyAuth: []
      requestBody:
        content:
          multipart/form-data::
            schema:
              type: object
              properties:
                assets: 
                  type: array
                  items:
                    $ref: "#/components/schemas/assets" 
              
      responses:
        '201':
          description: Assets uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  assetID:
                    type: integer
                  assetName:
                    type: string
        '500':
          $ref: "#/components/responses/Standard500ErrorResponse"
        
components:
  parameters:
    orderIdQueryParam:
      name: orderId
      in: query
      required: true
      schema:
        type: integer
  schemas:
    assets:
      type: object
      properties:
        assetID:
          type: integer
        assetName:
          type: string
          description: >-
                    name of files to be added. Name cannot contain any of the
                    characters mentioned in braces (\, /, :, *, ?, â€œ, <, >, |)
        assetsPath:
          description: files for translation. type is file.
          type: string
          format: binary 
      required:
        - assetID
        - assetName
        - assetsPath
    Error:
      required:
        - timestamp
        - error
        - message
        - detail
      properties:
        timestamp:
          description: The server time stamp
          type: string
          example: 1518308894652
        error:
          description: The Brand API error code
          type: string
          example: 336
        message:
          description: The error message
          type: string
          example: error mesage
        detail:
          description: The source of the error
          type: string
          example: source
  responses:
    Standard500ErrorResponse:
      description: There was an unexpected error processing the request
      headers:
        Content-Type:
          schema:
            type: string
            default: application/problem+json
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Error'
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
        application/octet-stream:
          schema:
            $ref: '#/components/schemas/Error'
        application/json:
          examples:
            response:
              value:
                timestamp: '2023-02-16 10:49:29'
                error: INTERNAL_SERVER_ERROR
                title: There was an error processing the request
                detail: '{''pointer'' : ''not available''}'
    Standard404ErrorResponse:
      description: Resource not found
      headers:
        Content-Type:
          schema:
            type: string
            default: application/json
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Error'
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
        application/octet-stream:
          schema:
            $ref: '#/components/schemas/Error'
        application/json:
          examples:
            response:
              value:
                timestamp: '2023-02-16 10:49:29'
                error: RESOURCE_NOT_FOUND
                message: The resource you are requesting does not exists.
                detail: '{''pointer'' : ''not available''}'
    Standard414ErrorResponse:
      description: The request URI was too long
      headers:
        Content-Type:
          schema:
            type: string
            default: application/json
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Error'
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
        application/octet-stream:
          schema:
            $ref: '#/components/schemas/Error'
        application/json:
          examples:
            response:
              value:
                timestamp: '2023-02-16 10:49:29'
                error: REQUEST_URI_TOO_LONG
                message: The requested URI was too long
                detail: '{''pointer'' : ''not available''}'
    Standard422ErrorResponse:
      description: Mandatory details not present
      headers:
        Content-Type:
          schema:
            type: string
            default: application/problem+json
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Error'
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
        application/octet-stream:
          schema:
            $ref: '#/components/schemas/Error'
        application/json:
          examples:
            response:
              value:
                timestamp: '2023-02-16 10:49:29'
                error: MANDATORY_PARAMETERS_NOT_FOUND
                message: The query paramater filter should have job-id as mandatory.
                detail: >-
                  {'/projects/{project-id}/status' : '?filter=job-id in
                  (35001)'}
  links:
    GetOrderByOrderId:
      description: >
        * The `orderId` value returned in the response can be used as a input paramter in `GET /orders`.
      operationId: getProductdetails
      parameters:
        orderId: '$response.body#/orderId'
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    APIKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
    oAuth2AuthCode:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://server/oauth/authorize
          tokenUrl: https://server/api/authorize/token
          scopes:
            read: read accesss
            write: write accesss
            admin: admin accesss

          

      
      
      
      
      
      
